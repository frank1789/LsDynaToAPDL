#include <QStringList>

#include "converter.h"
#include "gtest/gtest.h"

TEST(ConverterSyntax, Keyword) {
  auto converter = sintax::lsdyna::ConverterSintax();
  EXPECT_NO_THROW(converter.testInputLine("$"));
  EXPECT_NO_THROW(converter.testInputLine("*KEYWORD"));
  EXPECT_NO_THROW(converter.testInputLine("*NODE"));
  EXPECT_NO_THROW(converter.testInputLine("*ELEMENT_SHELL_THICKNESS"));
}

TEST(ConverterSyntax, Filename) {
  auto converter = sintax::lsdyna::ConverterSintax();
  converter.filenameChanged("testfile.k");
  EXPECT_EQ(converter.getFilename(), QString("testfile.k"));
}

TEST(ConverterSyntax, Node) {
  // clang-format off
  const QStringList text_lines = {
    {"*KEYWORD"},
    {"*NODE"},
    {"1230742     -240.277832      281.437195     -55.9616051     0.0     0.0"},
    {"1234655     -235.380905      275.594604     -55.9579811     0.0     0.0"},
    {"1234656     -230.403625      269.777252     -55.9557076     0.0     0.0"},
    {"1234657     -225.310608      264.010559     -55.9570045     0.0     0.0"},
    {"1234658     -220.083725      258.302856      -55.962204     0.0     0.0"},
    {"1234659     -214.703293      252.664764     -55.9718208     0.0     0.0"},
    {"1234660     -209.125793      247.141937     -55.9833794     0.0     0.0"},
    {"1234661     -203.310471       241.73819     -55.9988022     0.0     0.0"},
    {"1234662     -197.182404       236.49971     -56.0206261     0.0     0.0"},
    {"1234663     -190.721664      231.478012     -56.0332222     0.0     0.0"},
    {"1234664     -183.784882      226.769455     -56.0512581     0.0     0.0"},
    {"1234665     -176.271988      222.129166     -56.0907173     0.0     0.0"},
    {"1234666     -168.043533      217.748306     -56.1747513     0.0     0.0"},
    {"1234667     -159.033813      213.209732     -55.8686371     0.0     0.0"},
    {"1234668     -149.447205      209.166138     -54.1208305     0.0     0.0"},
    {"1234669     -139.990265      206.428635      -51.151062     0.0     0.0"},
    {"1234670     -130.918671      204.598434     -47.8448601     0.0     0.0"},
    {"1234671     -122.424721      203.881912     -44.4719505     0.0     0.0"},
    {"1234672     -114.244431      203.336288      -41.326828     0.0     0.0"},
    {"1234673     -106.203102      202.838013     -38.4156265     0.0     0.0"},
    {"1234674     -98.3009644      202.229294     -35.7500458     0.0     0.0"},
    {"1234675     -90.5665207      201.833069     -33.2940636     0.0     0.0"},
    {"1234676     -82.9492569      201.396851     -31.0835438     0.0     0.0"}
  };
  // clang-format on
  auto converter = sintax::lsdyna::ConverterSintax();
  for (const auto &line : text_lines) {
    converter.testInputLine("$");
    converter.testInputLine(line);
  }
}

TEST(ConverterSyntax, Shell) {
  // clang-format off
  const QStringList text_lines = {
    "*ELEMENT_SHELL_THICKNESS"
    "1282666       4 1248032 1248085 1248031 1248031"
    "3.9554682       3.9554682       3.9554682       3.955468"
    "1283206       4 1248600 1248624 1248605 1248605"
    "3.9421899       3.9421899       3.9421899       3.9421899"
    "1283449       4 1248841 1248845 1248840 1248840"
    "3.9697466       3.9697466       3.9697466       3.9697466"
    "*ELEMENT_SHELL_THICKNESS "
    "1269511       4 1234762 1234763 1235160 1235159"
    "4.2463937       4.2463937       4.2463937       4.2463937"
    "1269512       4 1235160 1234763 1234764 1235161"
    "4.2409911       4.2409911       4.2409911       4.2409911"
    "1269513       4 1235161 1234764 1234765 1235162"
    "4.2597589       4.2597589       4.2597589       4.2597589"
    "1269514       4 1235162 1234765 1234766 1235163"
    "4.2895956       4.2895956       4.2895956       4.2895956"
    "1269515       4 1235163 1234766 1234767 1235164"
    "4.3085828       4.3085828       4.3085828       4.3085828"
    "1269516       4 1235164 1234767 1234768 1235165"
    "4.3343463       4.3343463       4.3343463       4.3343463"
    "1269517       4 1235165 1234768 1234769 1235166"
    "4.3755336       4.3755336       4.3755336       4.3755336"
    "1269518       4 1235166 1234769 1234770 1235167"
    "4.4232969       4.4232969       4.4232969       4.4232969"
    "1269519       4 1235167 1234770 1234771 1235168"
    "4.4810367       4.4810367       4.4810367       4.4810367"
    "1269520       4 1235168 1234771 1234772 1235169"
    "4.5926056       4.5926056       4.5926056       4.5926056"
    "1269521       4 1235169 1234772 1234773 1235170"
    "4.635829        4.635829        4.635829        4.635829 "
    "1269522       4 1235170 1234773 1234774 1235171"
    "4.7214451       4.7214451       4.7214451       4.7214451"
    "1269523       4 1235171 1234774 1234775 1235172"
    "4.8307734       4.8307734       4.8307734       4.8307734"
    "1269524       4 1235172 1234775 1234776 1235173"
    "4.8929996       4.8929996       4.8929996       4.8929996"
    "1269525       4 1235173 1234776 1234777 1235174"
    "4.9955544       4.9955544       4.9955544       4.9955544"
    "1269526       4 1235174 1234777 1234778 1235175"
    "5.0506873       5.0506873       5.0506873       5.0506873"
    "1269527       4 1235175 1234778 1234779 1235176"
    "5.0340815       5.0340815       5.0340815       5.0340815"
    "1269528       4 1235176 1234779 1234780 1235177"
    "4.9517922       4.9517922       4.9517922       4.9517922"
    "1269529       4 1235177 1234780 1234781 1235178"
    "4.7522588       4.7522588       4.7522588       4.7522588"
    "1269530       4 1235178 1234781 1234782 1235179"
    "4.6475468       4.6475468       4.6475468       4.6475468"
    "1269531       4 1235179 1234782 1234783 1235180"
    "4.5665641       4.5665641       4.5665641       4.5665641"
    "1269532       4 1235180 1234783 1234784 1235181"
    "4.5115733       4.5115733       4.5115733       4.5115733"
    "1269533       4 1235181 1234784 1234785 1235182"
    "4.4648633       4.4648633       4.4648633       4.4648633"
};
  // clang-format on
  auto converter = sintax::lsdyna::ConverterSintax();
  for (const auto &line : text_lines) {
    converter.testInputLine("$");
    converter.testInputLine(line);
  }
}
